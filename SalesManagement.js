/**
 * あなたは PAIZA 社のエンジニアです。あなたはこれまでの売上のデータを横向きの棒グラフにする仕事を振られました。
 *
 * 与えられたデータは N 期分のデータで、第 i 期 (1 ≦ i ≦ N) の売上は a_i です。
 *
 * これをそのまま棒グラフにするととても長いグラフになります。ところが、幸いすべての期の売上が R の倍数になっていることに気づきました。
 *
 * そこで、売上のデータの単位を R として棒グラフを表示するプログラムを作成しましょう。
 *
 * 入力例 1 では、N = 3 期分のデータが与えられ、第 1 期の売上は a_1 = 5 、第 2 期の売上は a_2 = 15 、第 3 期の売上は a_3 = 10 です。売上データの単位を R = 5 として棒グラフにすると、下図のようになります。
 * 1:*..
 * 2:***
 * 3:**.
 * このような形で、売上データが与えられた時に棒グラフを出力してください。ただし、グラフの横幅は売り上げの最大値を R で割った数とします。上の例では 15 ÷ 5 = 3 が横幅となります。
 * 評価ポイント
 * 10回のテストケースで、正答率、実行速度、メモリ消費量をはかり得点が決まります。
 * より早い解答時間で提出したほうが得点が高くなります。
 * 複数のテストケースで正しい出力がされるか評価（+50点）
 * 解答までの速さ評価（+50点）
 * 入力される値
 * 入力は以下のフォーマットで与えられます。
 *
 * N R
 * a_1
 * a_2
 * ...
 * a_N
 * ・1 行目に売上データの個数を表す整数 N と、データの表示単位を表す整数 R がこの順で半角スペース区切りで与えられます。
 * ・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、第 i 期の売上を表す整数 a_i がこの順で与えられます。
 * ・入力は合計で N + 1 行となり、入力値最終行の末尾に改行が 1 つ入ります。
 *
 * それぞれの値は文字列で標準入力から渡されます。標準入力からの値取得方法はこちらをご確認ください
 * 期待する出力
 * 売上の棒グラフを以下の形式で出力してください。
 * 1:s_i
 * ...
 * N:s_N
 *
 * ・期待する出力は N 行からなります。
 * ・i 行目 (1 ≦ i ≦ N) には "i:" という表示のあと、第 i 期の棒グラフを表す文字列 s_i を出力して下さい。
 * ・売上データの最大値が M であるとき、s_i は M / R 文字からなり、第 j 文字 (1 ≦ j ≦ M / R) は j × R ≦ a_i を満たすとき "*"、そうでないとき "." としてください。
 * ・N 行目の出力の最後に改行を入れ、余計な文字、空行を含んではいけません。
 * 条件
 * すべてのテストケースにおいて、以下の条件をみたします。
 *
 * ・2 ≦ N ≦ 9
 * ・1 ≦ R ≦ 1,000
 * ・0 ≦ a_i ≦ 1,000 (1 ≦ i ≦ N)
 * ・各 a_i は R の倍数
 */

// 入力値を切り替える。
const lines = ["3 5", "5", "15", "10", "", ""];
/**
 * 出力
 * 1:*..
 * 2:***
 * 3:**.
 */

// const lines = ["4 2", "12", "8", "16", "10"];
/**
 * // 出力
 * // 1:******..
 * // 2:****....
 * // 3:********
 * // 4:*****...
 */

const paiza = (() => {
    const [forNumQuarter, multiple] = lines[0].split(" ");
    const proceeds = [];
    for (let i = 1; !!lines[i]; i++) {
        proceeds.push(lines[i]);
    }
    const maximumSales = Math.max(...proceeds.map(Number));
    for (let i = 0; i < proceeds.length; i++) {
        const proceedsLength = proceeds[i] / multiple;
        const proceedsResult = "*".repeat(proceedsLength);
        const result = ".".repeat(maximumSales / multiple - proceedsLength);
        // 出力と一致すれば正解。
        console.log(`${i + 1}:${proceedsResult}${result}`);
    }
    return undefined;
})();
